# Optimise swap for zram

# Our swap is super fast in-memory via zram so we can afford to be more aggressive with swappiness.
# https://docs.kernel.org/admin-guide/sysctl/vm.html#swappiness
vm.swappiness = 180

# With zstd zram the decompression adds enough overhead that there's essentially zero throughput gain
# from readahead. Use vm.page-cluster=0.
# (This is default on ChromeOS and Android)
# https://old.reddit.com/r/Fedora/comments/mzun99/new_zram_tuning_benchmarks/
# https://issues.chromium.org/issues/41028506#comment17
# https://cs.android.com/search?q=page-cluster&start=21
vm.page-cluster = 0

# Watermark boosting pre-emptively frees up memory to prevent a page allocation miss
# Broken feature that causes page thrashing, disabled by setting to "0"
# (This is default on Ubuntu)
# https://groups.google.com/g/linux.debian.user/c/YcDYu-jM-to
# https://lists.ubuntu.com/archives/kernel-team/2020-March/108587.html
vm.watermark_boost_factor = 0

# Controls the aggressiveness of kswapd. It defines the amount of memory left in a node/system before
# kswapd is woken up and how much memory needs to be free before kswapd goes back to sleep.
# PopOS did a lot of testing with users and arrived at this value to optimise for zram swap.
# https://wiki.archlinux.org/title/Zram#Optimizing_swap_on_zram
# https://www.reddit.com/r/pop_os/comments/104kbs4/zram_now_enabled_by_default_in_pop/
# https://github.com/pop-os/default-settings/pull/163/files#diff-8e1248486dec1681fa98c577efaaf729cb8655c9bb18ae19cc68f5a1baa8ab6bR3
vm.watermark_scale_factor = 125
